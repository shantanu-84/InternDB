@page "/dashboard"
@using InternDB.Services
@using InternDB.Data
@inject InternService InternService
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Dashboard</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h2 class="mb-4">Dashboard</h2>
        </div>
    </div>

    <!-- Total Interns Card -->
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4>@totalInterns</h4>
                            <p class="mb-0">Total Interns</p>
                        </div>
                        <div class="align-self-center">
                            <i class="oi oi-people" style="font-size: 2rem;"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Interns and Top Departments -->
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                        <div class="card-header">
                            <h5><i class="oi oi-clock"></i> 3 Most Recently Added Interns</h5>
                        </div>
                <div class="card-body">
                    @if (recentInterns.Any())
                    {
                        <div class="list-group">
                            @foreach (var intern in recentInterns.Take(3))
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-1">@intern.FirstName @intern.LastName</h6>
                                        <small class="text-muted">@intern.Department - @intern.Position</small>
                                    </div>
                                    <span class="badge badge-primary">Joined: @intern.StartDate.ToString("MMM dd, yyyy")</span>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No interns found (Total: @totalInterns)</p>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5><i class="oi oi-bar-chart"></i> Top 3 Departments by Intern Count</h5>
                </div>
                <div class="card-body">
                    @if (topDepartments.Any())
                    {
                        <div class="list-group">
                            @foreach (var dept in topDepartments.Take(3))
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <span>@dept.Key</span>
                                    <span class="badge badge-primary">@dept.Value intern@(dept.Value == 1 ? "" : "s")</span>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No department data available (Total: @totalInterns)</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private int totalInterns = 0;
    private List<Intern> recentInterns = new();
    private Dictionary<string, int> topDepartments = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            var interns = await InternService.GetAllInternsAsync();
            totalInterns = interns.Count;
            recentInterns = interns.OrderByDescending(i => i.CreatedAt).ToList();
            
            // Calculate top departments
            topDepartments = interns
                .GroupBy(i => i.Department)
                .ToDictionary(g => g.Key, g => g.Count())
                .OrderByDescending(kvp => kvp.Value)
                .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
        }
        catch (Exception ex)
        {
            // Log error or handle it
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
    }
}
