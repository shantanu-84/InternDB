@page "/interns"
@attribute [Authorize(Roles = "Admin")]
@using InternDB.Data
@using InternDB.Services
@using System.Text
@inject InternService InternService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Interns - InternDB</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Interns</h2>
                <div>
                    <button class="btn btn-success me-2" @onclick="ExportToCsv">
                        <span class="oi oi-data-transfer-download"></span>
                        Export to CSV
                    </button>
                    <button class="btn btn-primary" @onclick="AddNewIntern">
                        <span class="oi oi-plus"></span> Add New Intern
                    </button>
                </div>
            </div>
            
            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Search interns..." @bind="searchTerm" @onkeyup="OnSearchChanged" />
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" @onclick="SearchInterns">
                                    <span class="oi oi-magnifying-glass"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" @bind="departmentFilter">
                            <option value="">All Departments</option>
                            @foreach (var d in departments)
                            {
                                <option value="@d">@d</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" @bind="statusFilter">
                            <option value="">All Statuses</option>
                            <option value="Active">Active</option>
                            <option value="Completed">Completed</option>
                        </select>
                    </div>
                </div>
                
                @if (interns.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Department</th>
                                    <th>Position</th>
                                    <th>Start Date</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var intern in interns)
                                {
                                    <tr>
                                        <td>@intern.FullName</td>
                                        <td>@intern.Email</td>
                                        <td>@intern.Department</td>
                                        <td>@intern.Position</td>
                                        <td>@intern.StartDate.ToString("MMM dd, yyyy")</td>
                                        <td>
                                            @if (intern.EndDate.HasValue && intern.EndDate.Value <= DateTime.Now)
                                            {
                                                <span class="badge bg-secondary">Completed</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => EditIntern(intern.Id)">
                                                    <span class="oi oi-pencil"></span>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteIntern(intern.Id, intern.FullName)">
                                                    <span class="oi oi-trash"></span>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        <h4>No interns found</h4>
                        <p>@(string.IsNullOrEmpty(searchTerm) ? "Get started by adding your first intern." : "No interns match your search criteria.")</p>
                        @if (string.IsNullOrEmpty(searchTerm))
                        {
                            <button class="btn btn-primary" @onclick="AddNewIntern">Add First Intern</button>
                        }
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private List<Intern> interns = new();
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private string departmentFilter = string.Empty;
    private string statusFilter = string.Empty;
    private HashSet<string> departments = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadInterns();
    }
    
    private async Task LoadInterns()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            interns = string.IsNullOrEmpty(searchTerm)
                ? await InternService.GetAllInternsAsync()
                : await InternService.SearchInternsAsync(searchTerm);

            // populate department list
            departments = interns.Select(i => i.Department).Where(d => !string.IsNullOrWhiteSpace(d)).ToHashSet(StringComparer.OrdinalIgnoreCase);

            // apply filters client-side for now
            if (!string.IsNullOrWhiteSpace(departmentFilter))
            {
                interns = interns.Where(i => string.Equals(i.Department, departmentFilter, StringComparison.OrdinalIgnoreCase)).ToList();
            }
            if (!string.IsNullOrWhiteSpace(statusFilter))
            {
                interns = interns.Where(i => StatusOf(i) == statusFilter).ToList();
            }
        }
        catch (Exception ex)
        {
            // In a real application, you'd want to show this error to the user
            Console.WriteLine($"Error loading interns: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task SearchInterns()
    {
        await LoadInterns();
    }

    private string StatusOf(Intern intern)
    {
        if (intern.EndDate.HasValue && intern.EndDate.Value <= DateTime.Now)
            return "Completed";
        return "Active";
    }
    
    private async Task OnSearchChanged(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchInterns();
        }
    }
    
    private void AddNewIntern()
    {
        Navigation.NavigateTo("/interns/add");
    }
    
    private void EditIntern(int id)
    {
        Navigation.NavigateTo($"/interns/edit/{id}");
    }
    
    private async Task DeleteIntern(int id, string name)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {name}?"))
        {
            var success = await InternService.DeleteInternAsync(id);
            if (success)
            {
                await LoadInterns();
            }
        }
    }

    private async Task ExportToCsv()
    {
        try
        {
            var sb = new StringBuilder();
            
            // Add CSV header
            sb.AppendLine("Name,Email,Department,Position,Start Date,End Date,Status");
            
            // Add data rows
            foreach (var intern in interns)
            {
                var row = string.Join(",",
                    EscapeCsvField(intern.FullName),
                    EscapeCsvField(intern.Email),
                    EscapeCsvField(intern.Department),
                    EscapeCsvField(intern.Position),
                    EscapeCsvField(intern.StartDate.ToString("yyyy-MM-dd")),
                    EscapeCsvField(intern.EndDate?.ToString("yyyy-MM-dd") ?? ""),
                    EscapeCsvField(intern.EndDate.HasValue && intern.EndDate.Value <= DateTime.Now ? "Completed" : "Active")
                );
                sb.AppendLine(row);
            }

            // Generate filename with current date
            var filename = $"interns_export_{DateTime.Now:yyyy-MM-dd}.csv";
            
            // Trigger download using JavaScript
            await JSRuntime.InvokeVoidAsync("downloadFile", filename, sb.ToString());
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error exporting to CSV: {ex.Message}");
        }
    }

    private string EscapeCsvField(string field)
    {
        if (string.IsNullOrEmpty(field)) return "";
        
        // If the field contains comma, newline, or double quote, it needs to be escaped
        if (field.Contains(",") || field.Contains("\"") || field.Contains("\n") || field.Contains("\r"))
        {
            // Replace double quotes with two double quotes
            field = field.Replace("\"", "\"\"");
            // Wrap the field in double quotes
            return $"\"{field}\"";
        }
        
        return field;
    }
}
